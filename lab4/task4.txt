
Задание 4.1.

Разработать программу, которая запускает дочерний процесс с заданными входными
аргументами, дожидается завершения этого процесса и выводит в терминал
JSON-документ с итоговым статусом процесса.

Требования.
1. Имя запускаемого приложения и его аргументы задаются задаются через входные
аргументы программы.
2. Если предпоследним аргументом программы является символ "<", то программа
должна перенаправлять поток ввода дочернего процесса в файл, указанный в
последнем аргументе.
3. Программа должна перехватывать сигнал SIGUSR1. По этому сигналу программа
должна завершать дочерний процесс.
4. В итоговом JSON-документе должны быть указаны имя код возврата дочернего
процесса, содержимое потока вывода и имя сигнала (если дочерний процесс
завершился в результате обработки сигнала).

Задание 4.2.

То же, но программа поддерживает возможность запуска нескольких дочерних
процессов одновременно. При этом поток вывода первого процесса
перенаправляется в поток ввода второго и т.д. Во входных аргументах программы
запускаемые приложения отделяются символом "|". В JSON-документе выводится
вывод последнего дочернего процесса.

Пример 1.
Команда:
$ ./lab4.py cat  "<" lab1.py "|" grep isinstance

ВАЖНО! При вводе надо брать символы "<" и "|" в кавычки, иначе они будут
интерпретированы самим командным интерпретатором bash, а не переданы программе
в качестве аргументов.

Вывод:
[
	{
		"name": "cat",
		"code": 0
	},
	{
		"name": "grep",
		"code": 0,
		"output": "    if isinstance(j, dict):\n"
	}
]

Пример 2.
Команда:
$ ./lab4.py sleep 10

Далее в другом терминале вводится команда (надо подставить правильный PID):
$ kill -USR1 21055

Вывод:
[
	{
		"name": "sleep",
		"code": -10,
		"output": "",
		"signal" : "Terminated"
	}
]
